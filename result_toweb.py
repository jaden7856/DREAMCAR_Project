# -*- coding: utf-8 -*-
"""result_toweb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s1QxZh-oNBSNz-SoB9AduNk_-q9IN1Vk
"""

import re
import requests
import recommend

from bs4 import BeautifulSoup
from difflib import SequenceMatcher

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains

# 태그 하나씩 분리해서 리스트로 저장
def extract_tag(txt):
    hangul = re.compile('[^#,ㄱ-ㅣ가-힣]+') # 한글과 쉼표를 제외한 모든 글자
    # hangul = re.compile('[^ ,\u3131-\u3163\uac00-\ud7a3]+')  # 위와 동일
    result = hangul.sub('', txt).split(',') # 한글과 쉼표를 제외한 모든 부분을 제거한뒤 나눔

    return result

def similar(a, b):
    return SequenceMatcher(None, a, b).ratio()

def result_toweb(my_tag, title):
    # 멜론사이트에서 추천된 플레이리스트 제목 검색
    hangul = re.compile('[^ㄱ-ㅣ가-힣0-9a-zA-Z]+')
    # hangul = re.compile('[^ ,\u3131-\u3163\uac00-\ud7a3]+')  # 위와 동일
    title2 = hangul.sub(' ', title)
    url = 'http://www.melon.com/dj/djfinder/djfinder_inform.htm?djSearchType=P&djSearchKeyword='+ title2

    header = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko'}
    melon = requests.get(url, headers = header) # 멜론차트 웹사이트
    melon_html = melon.text
    melon_parse= BeautifulSoup(melon_html, 'html.parser')

    # 검색한 플레이리스트들 태그들을 가져와서 플레이리스트별 포함된 태그리스트 만들기
    basic = melon_parse.find('div', id='djPlylstList').find('ul')
    tag_list = str(basic.find_all('div', class_='tag_list'))
    tag_list = extract_tag(tag_list)

    search_tag=[]
    for i in range(0,len(tag_list)):
        search_tag.append(tag_list[i].split('##'))
        search_tag[i].remove('')

    # 도출된 태그리스트와 검색한 태그리스트 비교하여 정확한 플레이리스트 인덱스 찾기
    tag_result = []
    for i in range(0, len(search_tag)) :
        tag_result.append(similar(my_tag, search_tag[i]))
        
    tag_idx = tag_result.index(max(tag_result))

    # 플레이리스트 링크 가져오기
    link = basic.find_all('a', class_='ellipsis album_name')

    # 플레이리스트 url 생성
    # 플레이리스트 url 생성
    try :
        url_id = str(link[tag_idx]).split('.')[4].split(',')[3].split("'")[1]
        tag_url = 'https://www.melon.com/mymusic/dj/mymusicdjplaylistview_inform.htm?plylstSeq='+url_id
    except IndexError :
        tag_url = 'https://www.melon.com/dj/djfinder/djfinder_inform.htm?djSearchType=T&djSearchKeyword='+my_tag[0]
    except :
        url_id = '443147074'
        tag_url = 'https://www.melon.com/mymusic/dj/mymusicdjplaylistview_inform.htm?plylstSeq='+url_id

    return tag_url

# 웹브라우저 새창으로 열기
def autoplay(my_tag, title) :
    tag_url = result_toweb(my_tag, title)
    driver = webdriver.Chrome(executable_path='C:/Users/User/Google 드라이브/Pycharm/Car_Project/chromedriver.exe')
    driver.get("chrome://settings/content/siteDetails?site=https%3A%2F%2Fwww.melon.com")

    actions = ActionChains(driver)
    actions = actions.send_keys(Keys.TAB * 11)
    actions = actions.send_keys(Keys.SPACE)
    actions = actions.send_keys(Keys.SPACE)
    actions = actions.send_keys(Keys.DOWN)
    actions = actions.send_keys(Keys.ENTER)
    actions.perform()

    driver.get(tag_url)
    driver.implicitly_wait(10)
    driver.find_element_by_xpath('//*[@id="frm"]/div/table/thead/tr/th[1]/div').click()
    driver.implicitly_wait(10)
    driver.find_element_by_xpath('//*[@id="frm"]/div/div/button[1]').click()


if __name__ == "__main__":
    song_csv = "C:/Users/User/Google 드라이브/Pycharm/Car_Project/arena_data/song.csv"
    train_json = 'C:/Users/User/Google 드라이브/Pycharm/Car_Project/arena_data/data.json'
    my_id = 111101

    ply_id, ply_cos, ply_title, ply_tag, song_list = recommend.main(song_csv, train_json, 'happy', my_id)
    print(ply_tag)
    autoplay(ply_tag, ply_title)